import os
import time
import platform
import psutil

# Function to monitor a log file in real-time
def monitor_log_file(log_file):
    print(f"Monitoring log file: {log_file}")
    with open(log_file, 'r') as f:
        f.seek(0, os.SEEK_END)  # Move to end of file
        while True:
            line = f.readline()
            if line:
                print(f"[LOG] {line.strip()}")
            time.sleep(1)

# Function to list running processes
def list_processes():
    print("Listing running processes:")
    for proc in psutil.process_iter(attrs=['pid', 'name']):
        print(f"PID: {proc.info['pid']}, Name: {proc.info['name']}")

# Function to collect system logs (Windows Event Logs or Linux Syslog)
def collect_system_logs():
    system = platform.system()
    if system == "Windows":
        print("Collecting Windows Event Logs... (Placeholder)")
        # Future implementation using win32evtlog
    elif system == "Linux":
        print("Collecting Linux Syslogs... (Placeholder)")
        # Future implementation using journalctl
    else:
        print("Unsupported OS")

if __name__ == "__main__":
    print("Starting Log Collector...")
    list_processes()
    collect_system_logs()
    
    # Example usage of log file monitoring
    # Replace with an actual log file path
    log_file_path = "system.log"  # Change this to your log file
    if os.path.exists(log_file_path):
        monitor_log_file(log_file_path)
    else:
        print(f"Log file {log_file_path} not found.")
